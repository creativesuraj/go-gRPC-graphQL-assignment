// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protos/book/book.proto

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookHandlers_CreateBook_FullMethodName = "/protos.BookHandlers/CreateBook"
	BookHandlers_GetBooks_FullMethodName   = "/protos.BookHandlers/GetBooks"
	BookHandlers_UpdateBook_FullMethodName = "/protos.BookHandlers/UpdateBook"
	BookHandlers_DeleteBook_FullMethodName = "/protos.BookHandlers/DeleteBook"
)

// BookHandlersClient is the client API for BookHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookHandlersClient interface {
	// gRPC service information
	CreateBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	GetBooks(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Books, error)
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	DeleteBook(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type bookHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewBookHandlersClient(cc grpc.ClientConnInterface) BookHandlersClient {
	return &bookHandlersClient{cc}
}

func (c *bookHandlersClient) CreateBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookHandlers_CreateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHandlersClient) GetBooks(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, BookHandlers_GetBooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHandlersClient) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookHandlers_UpdateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHandlersClient) DeleteBook(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, BookHandlers_DeleteBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookHandlersServer is the server API for BookHandlers service.
// All implementations must embed UnimplementedBookHandlersServer
// for forward compatibility
type BookHandlersServer interface {
	// gRPC service information
	CreateBook(context.Context, *BookRequest) (*BookResponse, error)
	GetBooks(context.Context, *wrapperspb.StringValue) (*Books, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*BookResponse, error)
	DeleteBook(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedBookHandlersServer()
}

// UnimplementedBookHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedBookHandlersServer struct {
}

func (UnimplementedBookHandlersServer) CreateBook(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookHandlersServer) GetBooks(context.Context, *wrapperspb.StringValue) (*Books, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookHandlersServer) UpdateBook(context.Context, *UpdateBookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookHandlersServer) DeleteBook(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookHandlersServer) mustEmbedUnimplementedBookHandlersServer() {}

// UnsafeBookHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookHandlersServer will
// result in compilation errors.
type UnsafeBookHandlersServer interface {
	mustEmbedUnimplementedBookHandlersServer()
}

func RegisterBookHandlersServer(s grpc.ServiceRegistrar, srv BookHandlersServer) {
	s.RegisterService(&BookHandlers_ServiceDesc, srv)
}

func _BookHandlers_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHandlersServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookHandlers_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHandlersServer).CreateBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHandlers_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHandlersServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookHandlers_GetBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHandlersServer).GetBooks(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHandlers_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHandlersServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookHandlers_UpdateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHandlersServer).UpdateBook(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHandlers_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHandlersServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookHandlers_DeleteBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHandlersServer).DeleteBook(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// BookHandlers_ServiceDesc is the grpc.ServiceDesc for BookHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.BookHandlers",
	HandlerType: (*BookHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookHandlers_CreateBook_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _BookHandlers_GetBooks_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookHandlers_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookHandlers_DeleteBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/book/book.proto",
}
